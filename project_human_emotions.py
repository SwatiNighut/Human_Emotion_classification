# -*- coding: utf-8 -*-
"""project_human_emotions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19sexAVZfIbpSkrp04RM3r6WU2i_6usOz
"""

!unzip "/content/drive/MyDrive/Colab Notebooks/human_emotions.zip"

"""# New Section"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D

import os



base_dir = 'human_emotions'

train_dir = 'human_emotions/train'
test_dir = 'human_emotions/test'

train_anger_dir = 'human_emotions/train/anger'
train_fear_dir = 'human_emotions/train/fear'
train_sad_dir = 'human_emotions/train/sad'
train_happy_dir = 'human_emotions/train/happy'
train_surprise_dir = 'human_emotions/train/surprise'


test_anger_dir = 'human_emotions/test/anger'
test_fear_dir = 'human_emotions/test/fear'
test_sad_dir = 'human_emotions/test/sad'
test_happy_dir = 'human_emotions/test/happy'
test_surprise_dir = 'human_emotions/test/surprise'

print('total train anger images:', len(os.listdir(train_anger_dir)))
print('total train fear images:', len(os.listdir(train_fear_dir)))
print('total train sad images:', len(os.listdir(train_sad_dir)))
print('total train happy images:', len(os.listdir(train_happy_dir)))
print('total train surprise images:', len(os.listdir(train_surprise_dir)))
print('total test anger images:', len(os.listdir(test_anger_dir)))
print('total test fear images:', len(os.listdir(test_fear_dir)))
print('total test sad images:', len(os.listdir(test_sad_dir)))
print('total test happy images:', len(os.listdir(test_happy_dir)))
print('total test surprise images:', len(os.listdir(test_surprise_dir)))

from tensorflow.keras.preprocessing.image import ImageDataGenerator


train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(train_dir,target_size=(48,48),batch_size=32,class_mode='categorical',color_mode='grayscale')
test_generator = test_datagen.flow_from_directory(test_dir,target_size=(48,48),batch_size=32,class_mode='categorical',color_mode='grayscale')

model = Sequential()
model.add(Conv2D(64, (3, 3), activation='relu',input_shape=(48,48,1)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))




model.add(Flatten())

model.add(Dense(256, activation='relu'))

model.add(Dense(5, activation='softmax'))

model.summary()

model.compile(loss='categorical_crossentropy',optimizer="adam",metrics=['accuracy'])
model.fit_generator(train_generator,epochs=15)

test_loss, test_accuracy = model.evaluate(test_generator)
print(test_loss)
print(test_accuracy)

emotion_json = model.to_json()
with open("emotion.json", "w") as json_file:
    json_file.write(emotion_json)
model.save_weights("emotion.h5")

from tensorflow.keras.applications import VGG16

conv_base = VGG16(weights='imagenet', include_top=False,input_shape=(150, 150, 3))

conv_base.summary()

tl_model = Sequential()
tl_model.add(conv_base)
tl_model.add(Flatten())
tl_model.add(Dense(512, activation='relu'))

tl_model.add(Dense(5, activation='softmax'))

conv_base.trainable = False

tl_model.compile(loss='categorical_crossentropy',optimizer="adam",metrics=['acc'],)
tl_model.fit_generator(train_generator,epochs=15)

test_loss, test_accuracy = tl_model.evaluate(test_generator)
print(test_loss)
print(test_accuracy)

